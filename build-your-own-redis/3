package utils.store.impl;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.lang.ref.WeakReference;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import utils.resp.RespParser;
import utils.resp.RespSerializer;
import utils.resp.RespValue;
import utils.store.RedisStore;

public class AofStore {

  private final RedisStore store = RedisStoreImpl.getInstance();
  private final Lock lock = new ReentrantLock();
  private static final String FILE_PATH = "database.aof";

  static {
    try (RandomAccessFile file = new RandomAccessFile(FILE_PATH, "rw")) {

    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  public static void sync() {
    new Thread(
        () -> {
          try (RandomAccessFile file = new RandomAccessFile(FILE_PATH, "rw")) {

            file.getChannel().force(true);
          } catch (IOException e) {
            e.printStackTrace();
          }
          try {
            Thread.sleep(2000);
          } catch (InterruptedException ex) {
            Thread.currentThread().interrupt();
          }
        });
  }

  public void write(RespValue... values) {
    lock.lock();
    try (FileWriter writer = new FileWriter(FILE_PATH, true)) {
      StringBuilder sb = new StringBuilder();

      for (RespValue value : values) {
        sb.append(new String(RespSerializer.getInstance().serialize(value)));
      }

      writer.write(sb.toString());
      writer.write(System.lineSeparator());
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      lock.unlock();
    }
  }

  public void read() {
    lock.lock();
    try {
      System.out.println(new String(Files.readAllBytes(Paths.get(FILE_PATH))));

    } catch (IOException ignored) {
    }
    try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH))) {
      String line;
      while ((line = reader.readLine()) != null) {
        System.out.println("line " + line);
        RespValue value = new RespParser((String) line).parse();

        System.out.println("value " + value);

        String command = value.array.get(0).bulk.toUpperCase();
        String[] args = value.array.stream().map((v) -> v.bulk).toArray(String[]::new);
        System.out.println("args " + args);
        System.out.println("command " + command);

        switch (command) {
          case "SET":
            store.set(args[1], args[2]);
            break;
          case "HSET":
            store.hset(args[1], args[2], args[3]);
            break;
          default:
            System.out.println("Unsupported command in AOF: " + command);
        }
        WeakReference<RespValue> clearValueObj = new WeakReference<>(value);
      }
    } catch (IOException e) {
      e.printStackTrace();
    } finally {
      lock.unlock();
    }
  }
}
